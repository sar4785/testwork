import os
import zipfile
import tarfile
import gzip
import shutil
from pathlib import Path

# üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
ZIP_FOLDER = r"C:\Users\User\Desktop\Wafer-classification-DCNN\convert_stdf_to_csv\Zipfile-STDF"
OUTPUT_FOLDER = r"C:\Users\User\Desktop\Wafer-classification-DCNN\convert_stdf_to_csv\Output-STDF"
os.makedirs(OUTPUT_FOLDER, exist_ok=True)


class ExtractZip:
    zip_folder = ZIP_FOLDER #folder ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå zip
    output_folder = OUTPUT_FOLDER #folder ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö .std ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    
    @staticmethod
    def extract_nested(file_path, temp_dir, session_filter=None):
        """
        ‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≠‡∏ô ‡πÜ ‡∏à‡∏ô‡πÄ‡∏à‡∏≠ .std
        """
        os.makedirs(temp_dir, exist_ok=True)

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå .std
        if file_path.lower().endswith(".std"):
            file_path_str = str(Path(file_path))
            if session_filter and session_filter.upper() not in file_path_str.upper():
                print(f"‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á {session_filter}): {file_path}")
                return None

            filename = Path(file_path).name
            lotname = filename.split('_')[0]
            lot_output = os.path.join(OUTPUT_FOLDER, lotname)
            os.makedirs(lot_output, exist_ok=True)

            dest_path = os.path.join(lot_output, filename)
            if not os.path.exists(dest_path):
                shutil.copy(file_path, dest_path)
                print(f"‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å .std ({session_filter or '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}): {dest_path}")
            return dest_path

        # üì¶ zip
        elif file_path.lower().endswith(".zip"):
            print(f"üì¶ ‡πÅ‡∏ï‡∏Å ZIP: {Path(file_path).name}")
            with zipfile.ZipFile(file_path, "r") as zip_ref:
                zip_ref.extractall(temp_dir)
            for root, _, files in os.walk(temp_dir):
                for f in files:
                    ExtractZip.extract_nested(
                        os.path.join(root, f),
                        os.path.join(temp_dir, "nested_zip"),
                        session_filter
                    )

        # üì¶ tar.gz
        elif file_path.lower().endswith((".tar.gz", ".tgz")):
            print(f"üì¶ ‡πÅ‡∏ï‡∏Å TAR.GZ: {Path(file_path).name}")
            try:
                with tarfile.open(file_path, "r:gz") as tar_ref:
                    tar_ref.extractall(temp_dir)
                for root, _, files in os.walk(temp_dir):
                    for f in files:
                        ExtractZip.extract_nested(
                            os.path.join(root, f),
                            os.path.join(temp_dir, "nested_tar"),
                            session_filter
                        )
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ï‡∏Å TAR.GZ: {file_path} -> {e}")

        # üìÇ gz (‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)
        elif file_path.lower().endswith(".gz"):
            print(f"üì¶ ‡πÅ‡∏ï‡∏Å GZ: {Path(file_path).name}")
            try:
                out_path = Path(temp_dir) / Path(file_path).stem
                with gzip.open(file_path, "rb") as f_in, open(out_path, "wb") as f_out:
                    shutil.copyfileobj(f_in, f_out)
                return ExtractZip.extract_nested(
                    str(out_path),
                    os.path.join(temp_dir, "nested_gz"),
                    session_filter
                )
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ï‡∏Å GZ: {file_path} -> {e}")

        return None

    @staticmethod
    def run(session_filter=None):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå .std ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        temp_root = Path(OUTPUT_FOLDER) / "_temp"
        if temp_root.exists():
            shutil.rmtree(temp_root)

        std_files = []
        for item in os.listdir(ZIP_FOLDER):
            item_path = Path(ZIP_FOLDER) / item
            if item_path.is_file():
                print(f"\nüîé ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {item}")
                extracted_std = ExtractZip.extract_nested(
                    str(item_path),
                    str(temp_root / item_path.stem),
                    session_filter
                )
                if extracted_std:
                    std_files.append(extracted_std)

        if not std_files:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö .std (filter={session_filter})")
        else:
            print(f"\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏û‡∏ö {len(std_files)} ‡πÑ‡∏ü‡∏•‡πå .std")
            print(f"üìÇ ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: {OUTPUT_FOLDER}")

        if temp_root.exists():
            shutil.rmtree(temp_root)

        return std_files
