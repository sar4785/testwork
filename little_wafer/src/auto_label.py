# src/auto_label.py
import os
import torch
import shutil
from pathlib import Path
import yaml
import pickle
from tqdm import tqdm
from torchvision import transforms
from torch.utils.data import DataLoader

from src.Unlabeled import UnlabeledImageDataset  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
from src.train import TrainModel


def auto_label(config_path="configs/config.yaml", threshold=0.9):
    """
    ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà train ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå WaferMap_PNG
    ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° class ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    """
    print("ü§ñ Starting Auto-Labeling Pipeline...")

    # ‡πÇ‡∏´‡∏•‡∏î config
    with open(config_path, "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"‚úÖ Using device: {device}")

    # ‡πÇ‡∏´‡∏•‡∏î LabelEncoder
    checkpoint_dir = Path(config['output']['checkpoints'])
    le_path = checkpoint_dir / "label_encoder.pkl"
    if not le_path.exists():
        raise FileNotFoundError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö LabelEncoder ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ train ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô")

    with open(le_path, "rb") as f:
        le = pickle.load(f)

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    trainer = TrainModel(config_path=config_path)
    # ‡∏î‡∏∂‡∏á num_classes ‡∏à‡∏≤‡∏Å LabelEncoder ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î dataset
    num_classes = len(le.classes_)

    model = trainer.create_custom_cnn_model(num_classes)
    model_path = checkpoint_dir / "wafer_classifier.pth"
    model.load_state_dict(torch.load(model_path, map_location=device))
    model = model.to(device)
    model.eval()
    print("üß† Model loaded successfully")

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path
    unlabeled_dir = Path(config['data']['wafer_map_png'])
    output_dir = Path(config['data']['auto_labeled'])
    output_dir.mkdir(parents=True, exist_ok=True)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ transform
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á dataset ‡πÅ‡∏•‡∏∞ dataloader
    dataset = UnlabeledImageDataset(root=unlabeled_dir, transform=transform)
    dataloader = DataLoader(dataset, batch_size=32, shuffle=False)

    print(f"üìÇ Found {len(dataset)} images to auto-label")

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    high_conf_count = 0
    low_conf_count = 0

    with torch.no_grad():
        for inputs, filenames in tqdm(dataloader, desc="üîç Predicting labels"):
            inputs = inputs.to(device)
            outputs = model(inputs)
            probs = torch.softmax(outputs, dim=1)
            confs, preds = torch.max(probs, dim=1)

            for i in range(len(filenames)):
                confidence = confs[i].item()
                predicted_class_idx = preds[i].item()
                predicted_label = le.classes_[predicted_class_idx]
                src_path = Path(filenames[i])  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å dataset

                if confidence >= threshold:
                    # ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏û‡∏≠ ‚Üí ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏° label
                    target_dir = output_dir / predicted_label
                    target_dir.mkdir(parents=True, exist_ok=True)
                    dst_path = target_dir / src_path.name

                    try:
                        shutil.copy(src_path, dst_path)
                        high_conf_count += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error copying {src_path.name}: {e}")
                else:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'Uncertain'
                    uncertain_dir = output_dir / "Uncertain"
                    uncertain_dir.mkdir(parents=True, exist_ok=True)
                    dst_path = uncertain_dir / f"{src_path.stem}_conf{confidence:.2f}{src_path.suffix}"
                    try:
                        shutil.copy(src_path, dst_path)
                        low_conf_count += 1
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error copying {src_path.name}: {e}")

    print(f"‚úÖ Auto-labeling complete!")
    print(f"   - ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏° label ‡πÅ‡∏•‡πâ‡∏ß: {high_conf_count} ‡πÑ‡∏ü‡∏•‡πå")
    print(f"   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥ (< {threshold}): {low_conf_count} ‡πÑ‡∏ü‡∏•‡πå (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'Uncertain')")
    print(f"üìÅ Results saved to: {output_dir}")